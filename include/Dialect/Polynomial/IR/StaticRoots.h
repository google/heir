// WARNING: this file is autogenerated. Do not edit manually, instead see
// scripts/generate_static_roots.py

#ifndef INCLUDE_DIALECT_POLYNOMIAL_IR_STATICROOTS_H_
#define INCLUDE_DIALECT_POLYNOMIAL_IR_STATICROOTS_H_

#include <optional>

#include "llvm/include/llvm/ADT/APInt.h"     // from @llvm-project
#include "llvm/include/llvm/ADT/DenseMap.h"  // from @llvm-project

namespace roots {

llvm::DenseMap<std::pair<unsigned, unsigned>, unsigned> STATIC_64BIT_ROOTS({
    {{12289, 256}, 3},
    {{12289, 512}, 1321},
    {{12289, 1024}, 7},
    {{786433, 256}, 335695},
    {{786433, 512}, 248908},
    {{786433, 1024}, 19},
    {{786433, 65536}, 283965},
    {{8380417, 256}, 1239911},
    {{8380417, 512}, 2217225},
    {{8380417, 1024}, 2034135},
});

llvm::DenseMap<std::pair<unsigned, unsigned>, unsigned> STATIC_32BIT_ROOTS({
    {{12289, 256}, 3},
    {{12289, 512}, 1321},
    {{12289, 1024}, 7},
    {{786433, 256}, 335695},
    {{786433, 512}, 248908},
    {{786433, 1024}, 19},
    {{786433, 65536}, 283965},
    {{8380417, 256}, 1239911},
    {{8380417, 512}, 2217225},
    {{8380417, 1024}, 2034135},
});

// Attempts to find a 64-bit primitive 2n-th root of unity from the pre-computed
// values, where n is the given degree. find64BitRoot should be used if the
// required bits to represent cMod is greater than 32 and less than or equal to
// 64.
std::optional<llvm::APInt> find64BitRoot(const llvm::APInt& cMod,
                                         unsigned degree, unsigned bitWidth) {
  std::optional<llvm::APInt> root = std::nullopt;
  // We currently only precompute 64 bit and 32 bit values so we can skip
  // greater than that to ensure getZExtValue does not throw an error
  if (cMod.getBitWidth() <= 64) {
    auto rootIt = STATIC_64BIT_ROOTS.find({cMod.getZExtValue(), degree});
    if (rootIt != STATIC_64BIT_ROOTS.end())
      root = llvm::APInt(bitWidth, rootIt->second);
  }
  return root;
}

// Attempts to find a 32-bit primitive 2n-th root of unity from the pre-computed
// values, where n is the given degree. find32BitRoot should be used if the
// required bits to represent cMod is and less than or equal to 32.
std::optional<llvm::APInt> find32BitRoot(const llvm::APInt& cMod,
                                         unsigned degree, unsigned bitWidth) {
  std::optional<llvm::APInt> root = std::nullopt;
  // We currently only precompute 64 bit and 32 bit values so we can skip
  // greater than that to ensure getZExtValue does not throw an error
  if (cMod.getBitWidth() <= 32) {
    auto rootIt = STATIC_32BIT_ROOTS.find({cMod.getZExtValue(), degree});
    if (rootIt != STATIC_32BIT_ROOTS.end())
      root = llvm::APInt(bitWidth, rootIt->second);
  }
  return root;
}

}  // namespace roots

#endif  // INCLUDE_DIALECT_POLYNOMIAL_IR_STATICROOTS_H_
