#include "lib/Target/OpenFhePke/OpenFheTranslateRegistration.h"

#include <string>

#include "lib/Dialect/LWE/IR/LWEDialect.h"
#include "lib/Dialect/ModArith/IR/ModArithDialect.h"
#include "lib/Dialect/Openfhe/IR/OpenfheDialect.h"
#include "lib/Dialect/Polynomial/IR/PolynomialDialect.h"
#include "lib/Dialect/RNS/IR/RNSDialect.h"
#include "lib/Dialect/RNS/IR/RNSTypeInterfaces.h"
#include "lib/Dialect/TensorExt/IR/TensorExtDialect.h"
#include "lib/Target/OpenFhePke/OpenFheBinEmitter.h"
#include "lib/Target/OpenFhePke/OpenFheBinHeaderEmitter.h"
#include "lib/Target/OpenFhePke/OpenFhePkeEmitter.h"
#include "lib/Target/OpenFhePke/OpenFhePkeHeaderEmitter.h"
#include "lib/Target/OpenFhePke/OpenFhePkePybindEmitter.h"
#include "lib/Target/OpenFhePke/OpenFheUtils.h"
#include "llvm/include/llvm/Support/CommandLine.h"    // from @llvm-project
#include "llvm/include/llvm/Support/ManagedStatic.h"  // from @llvm-project
#include "llvm/include/llvm/Support/raw_ostream.h"    // from @llvm-project
#include "mlir/include/mlir/Dialect/Affine/IR/AffineOps.h"  // from @llvm-project
#include "mlir/include/mlir/Dialect/Arith/IR/Arith.h"    // from @llvm-project
#include "mlir/include/mlir/Dialect/Func/IR/FuncOps.h"   // from @llvm-project
#include "mlir/include/mlir/Dialect/Tensor/IR/Tensor.h"  // from @llvm-project
#include "mlir/include/mlir/IR/DialectRegistry.h"        // from @llvm-project
#include "mlir/include/mlir/IR/Operation.h"              // from @llvm-project
#include "mlir/include/mlir/IR/Value.h"                  // from @llvm-project
#include "mlir/include/mlir/Support/LLVM.h"              // from @llvm-project
#include "mlir/include/mlir/Tools/mlir-translate/Translation.h"  // from @llvm-project

namespace mlir {
namespace heir {
namespace openfhe {

struct TranslateOptions {
  llvm::cl::opt<mlir::heir::openfhe::OpenfheImportType> openfheImportType{
      "openfhe-include-type",
      llvm::cl::desc("The type of imports to use for OpenFHE"),
      llvm::cl::init(mlir::heir::openfhe::OpenfheImportType::INSTALL_RELATIVE),
      llvm::cl::values(
          clEnumValN(mlir::heir::openfhe::OpenfheImportType::INSTALL_RELATIVE,
                     "install-relative",
                     "Emit OpenFHE with install-relative import paths (default "
                     "for user-facing code)"),
          clEnumValN(mlir::heir::openfhe::OpenfheImportType::SOURCE_RELATIVE,
                     "source-relative",
                     "Emit OpenFHE with source-relative import paths (default "
                     "for HEIR-internal development)"))};
  llvm::cl::opt<std::string> weightsFile{
      "weights-file",
      llvm::cl::desc("The file to write weights to (for OpenFHE PKE)"),
      llvm::cl::init("")};
  llvm::cl::opt<bool> skipVectorResizing{
      "skip-vector-resizing",
      llvm::cl::desc("Skip resizing vectors to ring dimension / 2"),
      llvm::cl::init(false)};
};
static llvm::ManagedStatic<TranslateOptions> options;

struct PybindOptions {
  llvm::cl::opt<std::string> pybindHeaderInclude{
      "pybind-header-include",
      llvm::cl::desc(
          "The HEIR-generated header to include for the pybind11 bindings")};
  llvm::cl::opt<std::string> pybindModuleName{
      "pybind-module-name",
      llvm::cl::desc(
          "The name of the generated python module (must match the .so file)")};
};
static llvm::ManagedStatic<PybindOptions> pybindOptions;

void registerTranslateOptions() {
  // Forces initialization of options.
  *options;
  *pybindOptions;
}

void registerToOpenFhePkeTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-pke",
      "translate the openfhe dialect to C++ code against the OpenFHE pke API",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFhePke(op, output, options->openfheImportType,
                                     options->weightsFile,
                                     options->skipVectorResizing);
      },
      [](DialectRegistry &registry) {
        registry
            .insert<affine::AffineDialect, arith::ArithDialect,
                    func::FuncDialect, openfhe::OpenfheDialect, lwe::LWEDialect,
                    ::mlir::heir::polynomial::PolynomialDialect,
                    tensor::TensorDialect, tensor_ext::TensorExtDialect,
                    mod_arith::ModArithDialect, rns::RNSDialect>();
        rns::registerExternalRNSTypeInterfaces(registry);
      });
}

void registerToOpenFhePkeHeaderTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-pke-header",
      "Emit a header corresponding to the C++ file generated by "
      "--emit-openfhe-pke",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFhePkeHeader(op, output,
                                           options->openfheImportType);
      },
      [](DialectRegistry &registry) {
        registry
            .insert<arith::ArithDialect, func::FuncDialect,
                    tensor::TensorDialect, tensor_ext::TensorExtDialect,
                    openfhe::OpenfheDialect, lwe::LWEDialect, rns::RNSDialect,
                    ::mlir::heir::polynomial::PolynomialDialect,
                    mod_arith::ModArithDialect>();
        rns::registerExternalRNSTypeInterfaces(registry);
      });
}

void registerToOpenFhePkePybindTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-pke-pybind",
      "Emit a C++ file containing pybind11 bindings for the input openfhe "
      "dialect IR"
      "--emit-openfhe-pke-pybind",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFhePkePybind(op, output,
                                           pybindOptions->pybindHeaderInclude,
                                           pybindOptions->pybindModuleName);
      },
      [](DialectRegistry &registry) {
        registry.insert<arith::ArithDialect, func::FuncDialect,
                        tensor::TensorDialect, tensor_ext::TensorExtDialect,
                        openfhe::OpenfheDialect, lwe::LWEDialect,
                        ::mlir::heir::polynomial::PolynomialDialect,
                        mod_arith::ModArithDialect, rns::RNSDialect>();
        rns::registerExternalRNSTypeInterfaces(registry);
      });
}

void registerToOpenFheBinTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-bin",
      "translate the openfhe dialect to C++ code against the OpenFHE BinFHE "
      "API",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFheBin(op, output);
      },
      [](DialectRegistry &registry) {
        registry.insert<arith::ArithDialect, func::FuncDialect,
                        openfhe::OpenfheDialect, lwe::LWEDialect,
                        ::mlir::heir::polynomial::PolynomialDialect,
                        tensor::TensorDialect, tensor_ext::TensorExtDialect>();
      });
}

void registerToOpenFheBinHeaderTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-bin-header",
      "Emit a header corresponding to the C++ file generated by "
      "--emit-openfhe-bin",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFheBinHeader(op, output);
      },
      [](DialectRegistry &registry) {
        registry.insert<arith::ArithDialect, func::FuncDialect,
                        tensor::TensorDialect, tensor_ext::TensorExtDialect,
                        openfhe::OpenfheDialect, lwe::LWEDialect,
                        ::mlir::heir::polynomial::PolynomialDialect>();
      });
}

}  // namespace openfhe
}  // namespace heir
}  // namespace mlir
