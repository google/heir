// WARNING: this file is autogenerated. Do not edit manually, instead see
// scripts/generate_static_roots.py

#ifndef LIB_DIALECT_POLYNOMIAL_IR_STATICROOTS_H_
#define LIB_DIALECT_POLYNOMIAL_IR_STATICROOTS_H_

#include <cstdint>
#include <optional>
#include <utility>

#include "llvm/include/llvm/ADT/APInt.h"     // from @llvm-project
#include "llvm/include/llvm/ADT/DenseMap.h"  // from @llvm-project

namespace roots {

const llvm::DenseMap<std::pair<int64_t, int64_t>, int64_t> STATIC_64BIT_ROOTS({
    {{4295049217, 256}, 274553346},      {{4295049217, 512}, 1889289995},
    {{4295049217, 1024}, 1931368771},    {{4295049217, 2048}, 1618277669},
    {{4295049217, 4096}, 858198451},     {{4295049217, 8192}, 1561392186},
    {{8590163969, 256}, 1410103437},     {{8590163969, 512}, 1657124628},
    {{8590163969, 1024}, 2313374037},    {{8590163969, 2048}, 1092733094},
    {{8590163969, 4096}, 1696295059},    {{8590163969, 8192}, 2344721074},
    {{8590163969, 16384}, 1065564758},   {{17180295169, 256}, 4763752664},
    {{17180295169, 512}, 7553290809},    {{17180295169, 1024}, 7973740862},
    {{17180295169, 2048}, 1140756048},   {{17180295169, 4096}, 3421869649},
    {{17180295169, 8192}, 1239517519},   {{17180295169, 16384}, 3556849617},
    {{34359771137, 256}, 7761084461},    {{34359771137, 512}, 16116241390},
    {{34359771137, 1024}, 12919249874},  {{34359771137, 2048}, 9543648539},
    {{34359771137, 4096}, 16172791310},  {{34359771137, 8192}, 16296284741},
    {{34359771137, 16384}, 2426733049},  {{68720066561, 256}, 17482832622},
    {{68720066561, 512}, 25179562901},   {{68720066561, 1024}, 29078880206},
    {{68720066561, 2048}, 5134158933},   {{68720066561, 4096}, 6232545493},
    {{68720066561, 8192}, 3728548714},   {{68720066561, 16384}, 29958712363},
    {{68720066561, 32768}, 9354163215},  {{137439510529, 256}, 3107858932},
    {{137439510529, 512}, 52792855593},  {{137439510529, 1024}, 28787046942},
    {{137439510529, 2048}, 61176612520}, {{137439510529, 4096}, 31544024574},
    {{137439510529, 8192}, 30124236160}, {{137439510529, 16384}, 17641448677},
});

const llvm::DenseMap<std::pair<int64_t, int64_t>, int64_t> STATIC_32BIT_ROOTS({
    {{65537, 256}, 14196},
    {{65537, 512}, 9427},
    {{65537, 1024}, 11591},
    {{65537, 2048}, 13585},
    {{65537, 4096}, 26126},
    {{65537, 8192}, 12930},
    {{65537, 16384}, 23365},
    {{65537, 32768}, 3},
    {{114689, 256}, 30351},
    {{114689, 512}, 31626},
    {{114689, 1024}, 5787},
    {{114689, 2048}, 4},
    {{114689, 4096}, 2},
    {{114689, 8192}, 3437},
    {{147457, 256}, 39853},
    {{147457, 512}, 68645},
    {{147457, 1024}, 31460},
    {{147457, 2048}, 65157},
    {{147457, 4096}, 50525},
    {{147457, 8192}, 61055},
    {{163841, 256}, 18786},
    {{163841, 512}, 11598},
    {{163841, 1024}, 27985},
    {{163841, 2048}, 38496},
    {{163841, 4096}, 78118},
    {{163841, 8192}, 5},
    {{163841, 16384}, 19408},
    {{557057, 256}, 80247},
    {{557057, 512}, 59653},
    {{557057, 1024}, 220888},
    {{557057, 2048}, 85783},
    {{557057, 4096}, 179461},
    {{557057, 8192}, 6289},
    {{557057, 16384}, 152236},
    {{638977, 256}, 70321},
    {{638977, 512}, 22946},
    {{638977, 1024}, 126066},
    {{638977, 2048}, 180172},
    {{638977, 4096}, 246750},
    {{638977, 8192}, 12306},
    {{737281, 256}, 368204},
    {{737281, 512}, 214788},
    {{737281, 1024}, 55014},
    {{737281, 2048}, 251570},
    {{737281, 4096}, 166607},
    {{737281, 8192}, 295256},
    {{786433, 256}, 335695},
    {{786433, 512}, 248908},
    {{786433, 1024}, 19},
    {{786433, 2048}, 259419},
    {{786433, 4096}, 79586},
    {{786433, 8192}, 104497},
    {{786433, 16384}, 361424},
    {{786433, 32768}, 3},
    {{786433, 65536}, 283965},
    {{1032193, 256}, 434811},
    {{1032193, 512}, 123481},
    {{1032193, 1024}, 61682},
    {{1032193, 2048}, 125890},
    {{1032193, 4096}, 219214},
    {{1032193, 8192}, 457749},
    {{1179649, 256}, 462451},
    {{1179649, 512}, 199872},
    {{1179649, 1024}, 570479},
    {{1179649, 2048}, 192540},
    {{1179649, 4096}, 440689},
    {{1179649, 8192}, 355273},
    {{1179649, 16384}, 255309},
    {{1179649, 32768}, 20027},
    {{1179649, 65536}, 327982},
    {{1769473, 256}, 402996},
    {{1769473, 512}, 498167},
    {{1769473, 1024}, 427732},
    {{1769473, 2048}, 151802},
    {{1769473, 4096}, 520784},
    {{1769473, 8192}, 146680},
    {{1769473, 16384}, 85113},
    {{1769473, 32768}, 81437},
    {{1785857, 256}, 886768},
    {{1785857, 512}, 510687},
    {{1785857, 1024}, 423354},
    {{1785857, 2048}, 812311},
    {{1785857, 4096}, 611016},
    {{1785857, 8192}, 799276},
    {{2277377, 256}, 853428},
    {{2277377, 512}, 479822},
    {{2277377, 1024}, 439772},
    {{2277377, 2048}, 436865},
    {{2277377, 4096}, 682346},
    {{2277377, 8192}, 490747},
    {{2424833, 256}, 4},
    {{2424833, 512}, 2},
    {{2424833, 1024}, 435662},
    {{2424833, 2048}, 970760},
    {{2424833, 4096}, 123931},
    {{2424833, 8192}, 1146585},
    {{2424833, 16384}, 871022},
    {{2424833, 32768}, 651018},
    {{2572289, 256}, 272232},
    {{2572289, 512}, 833271},
    {{2572289, 1024}, 1083926},
    {{2572289, 2048}, 109108},
    {{2572289, 4096}, 298335},
    {{2572289, 8192}, 1017435},
    {{2654209, 256}, 1238479},
    {{2654209, 512}, 1015735},
    {{2654209, 1024}, 79},
    {{2654209, 2048}, 76848},
    {{2654209, 4096}, 359099},
    {{2654209, 8192}, 13},
    {{2654209, 16384}, 984113},
    {{2752513, 256}, 227226},
    {{2752513, 512}, 175838},
    {{2752513, 1024}, 350386},
    {{2752513, 2048}, 551700},
    {{2752513, 4096}, 174967},
    {{2752513, 8192}, 252195},
    {{2752513, 16384}, 646799},
    {{2752513, 32768}, 12304},
    {{2752513, 65536}, 914578},
    {{2768897, 256}, 556187},
    {{2768897, 512}, 1268944},
    {{2768897, 1024}, 678296},
    {{2768897, 2048}, 828022},
    {{2768897, 4096}, 969594},
    {{2768897, 8192}, 136590},
    {{8380417, 256}, 1239911},
    {{8380417, 512}, 2217225},
    {{8380417, 1024}, 2034135},
    {{8380417, 2048}, 1003719},
    {{8380417, 4096}, 3683848},
    {{2147565569, 256}, 37611131},
    {{2147565569, 512}, 648314283},
    {{2147565569, 1024}, 692829023},
    {{2147565569, 2048}, 640478293},
    {{2147565569, 4096}, 892765802},
    {{2147565569, 8192}, 618932271},
    {{2148155393, 256}, 154509208},
    {{2148155393, 512}, 913977583},
    {{2148155393, 1024}, 501603808},
    {{2148155393, 2048}, 721420503},
    {{2148155393, 4096}, 218749606},
    {{2148155393, 8192}, 871117468},
    {{2148384769, 256}, 686021478},
    {{2148384769, 512}, 856000526},
    {{2148384769, 1024}, 789969800},
    {{2148384769, 2048}, 917853752},
    {{2148384769, 4096}, 599793517},
    {{2148384769, 8192}, 311879573},
    {{3221225473, 256}, 398968416},
    {{3221225473, 512}, 113806104},
    {{3221225473, 1024}, 537624636},
    {{3221225473, 2048}, 1592022166},
    {{3221225473, 4096}, 115286677},
    {{3221225473, 8192}, 299631909},
    {{3221225473, 16384}, 1081676373},
    {{3221225473, 32768}, 717163459},
    {{3221225473, 65536}, 210669417},
    {{3221241857, 256}, 96257164},
    {{3221241857, 512}, 1397863116},
    {{3221241857, 1024}, 807139086},
    {{3221241857, 2048}, 1580433773},
    {{3221241857, 4096}, 407179281},
    {{3221241857, 8192}, 1558766415},
    {{3758161921, 256}, 42458260},
    {{3758161921, 512}, 1117870354},
    {{3758161921, 1024}, 376008217},
    {{3758161921, 2048}, 1392895232},
    {{3758161921, 4096}, 805935839},
    {{3758161921, 8192}, 1341872038},
    {{3758161921, 16384}, 472576367},
    {{3758161921, 32768}, 1293145549},
});

// Attempts to find a 64-bit primitive 2n-th root of unity from the pre-computed
// values, where n is the given degree. find64BitRoot should be used if the
// required bits to represent cMod is greater than 32 and less than or equal to
// 64.
inline std::optional<llvm::APInt> find64BitRoot(const llvm::APInt& cMod,
                                                unsigned degree,
                                                unsigned bitWidth) {
  std::optional<llvm::APInt> root = std::nullopt;
  // We currently only precompute 64 bit and 32 bit values so we can skip
  // greater than that to ensure getZExtValue does not throw an error
  if (cMod.getBitWidth() <= 64) {
    auto rootIt = STATIC_64BIT_ROOTS.find({cMod.getZExtValue(), degree});
    if (rootIt != STATIC_64BIT_ROOTS.end())
      root = llvm::APInt(64, rootIt->second).trunc(bitWidth);
  }
  return root;
}

// Attempts to find a 32-bit primitive 2n-th root of unity from the pre-computed
// values, where n is the given degree. find32BitRoot should be used if the
// required bits to represent cMod is and less than or equal to 32.
inline std::optional<llvm::APInt> find32BitRoot(const llvm::APInt& cMod,
                                                unsigned degree,
                                                unsigned bitWidth) {
  std::optional<llvm::APInt> root = std::nullopt;
  // We currently only precompute 64 bit and 32 bit values so we can skip
  // greater than that to ensure getZExtValue does not throw an error
  if (cMod.getBitWidth() <= 64) {
    auto rootIt = STATIC_32BIT_ROOTS.find({cMod.getZExtValue(), degree});
    if (rootIt != STATIC_32BIT_ROOTS.end())
      root = llvm::APInt(64, rootIt->second).trunc(bitWidth);
  }
  return root;
}

}  // namespace roots

#endif  // LIB_DIALECT_POLYNOMIAL_IR_STATICROOTS_H_
