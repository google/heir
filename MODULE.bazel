module(name = "heir")

bazel_dep(name = "bazel_skylib", version = "1.7.1")

# This must come before apple_support cf. https://github.com/bazelbuild/bazel/issues/25728
bazel_dep(name = "rules_cc", version = "0.2.0")

# Apple compilation support.
# Note this requires full xcode, not just commandline tools
#
# Tested with:
#
# $ /usr/bin/xcodebuild -version
#   Xcode 16.2
#   Build version 16C5032a
bazel_dep(name = "apple_support", version = "1.21.0", repo_name = "build_bazel_apple_support")
bazel_dep(name = "rules_apple", version = "3.20.1")

# Gazelle puglin for BUILD file autogeneration
bazel_dep(name = "gazelle", version = "0.42.0")

bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1", dev_dependency = True)

# provides the `license` rule, which is required because llvm's gentbl_rule
# implicitly depends upon the target '//:license'. How bizarre.
bazel_dep(name = "rules_license", version = "1.0.0")

# rules_foreign_cc provides access to a `make` bazel rule, which is needed
# to build yosys
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")
bazel_dep(name = "rules_go", version = "0.53.0")
bazel_dep(name = "rules_python", version = "1.2.0")
bazel_dep(name = "googletest", version = "1.16.0")
bazel_dep(name = "google_benchmark", version = "1.9.1")
bazel_dep(name = "abseil-cpp", version = "20250127.0", repo_name = "com_google_absl")
bazel_dep(name = "pybind11_bazel", version = "2.13.6")
bazel_dep(name = "rules_shell", version = "0.6.1")

# Yosys dependencies that are already on the bazel central registry
# abc can't be used in place because it changes the names of the targets from
# abc-lib -> abc and abc -> abc_bin
#
# bazel_dep(name = "abc", version = "0.0.0-20250408-yosyshq.bcr.1", repo_name = "edu_berkeley_abc")
bazel_dep(name = "soplex", version = "7.1.4.bcr.1")

# The versions of yosys deps zlib and libffi that come with rules_hdl don't
# build for some versions of MacOS + Xcode (e.g., macOS 15.4 with Xcode 16.3).
# But these issues were fixed in later versions that happen to be available in
# the bazel central registry.
bazel_dep(name = "zlib", version = "1.3.1.bcr.6", repo_name = "net_zlib")
bazel_dep(name = "libffi", version = "3.4.7.bcr.3", repo_name = "org_sourceware_libffi")

# eigen 4.0.0-20241125.bcr.1 has issues with gitlab changing the checksum
# Cf. https://github.com/google/heir/issues/1840
bazel_dep(name = "eigen", version = "3.4.0.bcr.3")
bazel_dep(name = "or-tools", version = "9.12", repo_name = "com_google_ortools")

# needed as transitive deps of yosys
bazel_dep(name = "rules_flex", version = "0.3")
bazel_dep(name = "rules_bison", version = "0.3")

# Hermetic python setup
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

python.toolchain(python_version = "3.11")
python.toolchain(python_version = "3.12")

# or-tools requires python3.13
python.toolchain(python_version = "3.13")

pip.parse(
    hub_name = "heir_pip_deps",
    python_version = "3.11",
    requirements_lock = "//:requirements.txt",
)

use_repo(python, python_3_11 = "python_3_11")

use_repo(pip, "heir_pip_deps")

# Go setup
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

# Bazel ignores go.mod for the purpose of selecting a go version. To see which
# go version will be used, run:
#
#   bazel run @rules_go//go -- version
#
go_sdk.download(version = "1.24.2")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# All *direct* Go dependencies of the module have to be listed explicitly.
use_repo(
    go_deps,
    "com_github_tuneinsight_lattigo_v6",
)

# compile_commands extracts the relevant compile data from bazel into
# `compile_commands.json` so that clangd, clang-tidy, etc., can use it.
# Whenever a build file changes, you must re-run
#
#   bazel run @hedron_compile_commands//:refresh_all
#
# to ingest new data into these tools.
#
# See the project repo for more details and configuration options
# https://github.com/hedronvision/bazel-compile-commands-extractor
#
# For the override pointing to a different repo, see
# https://github.com/hedronvision/bazel-compile-commands-extractor/pull/219
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "02d15621b528efd877f5d5657c4b738523a0eb17",
    remote = "https://github.com/mikael-s-persson/bazel-compile-commands-extractor",
)

# Workaround 2025-03-18: re2 has not created a new version yet. This solves an
# issue with `bazel mod deps`. Cf. https://github.com/google/re2/issues/525
git_override(
    module_name = "re2",
    commit = "c84a140c93352cdabbfb547c531be34515b12228",
    remote = "https://github.com/google/re2",
)

bazel_dep(name = "rules_rust", version = "0.64.0")

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")
crate.spec(
    features = ["derive"],
    package = "clap",
    version = "4.1.8",
)
crate.spec(
    package = "rayon",
    version = "1.10.0",
)
crate.spec(
    features = ["derive"],
    package = "serde",
    version = "1.0.219",
)
crate.spec(
    features = [
        "boolean",
        "shortint",
        "integer",
    ],
    package = "tfhe",
    version = "1.1.3",
)
crate.from_specs()
use_repo(crate, "crates")
