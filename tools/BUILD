# HEIR tools

package(
    default_applicable_licenses = ["@heir//:license"],
    default_visibility = ["//visibility:public"],
)

WORKSPACE_PATH = ""

# Custom `mlir-opt` replacement that links our dialect and passes
cc_binary(
    name = "heir-opt",
    srcs = ["heir-opt.cpp"],
    data = select({
        "@heir//:config_enable_yosys": [
            "@edu_berkeley_abc//:abc",
            "@heir//lib/Transforms/YosysOptimizer/yosys:share_files",
        ],
        "//conditions:default": [],
    }),
    # The strings in these defines are passed through various pre-processors,
    # including the materializing of quoted strings as done in bash, so to
    # ensure that the #define'd variables stay quoted strings in the generated
    # C++, we need to enclose them in `\\\"` (an escaped backslash followed by
    # an escaped quote).
    defines = select({
        "@heir//:config_enable_yosys": [
            "HEIR_ABC_BINARY=\\\"$(rootpath @edu_berkeley_abc//:abc)\\\"",
            "HEIR_YOSYS_SCRIPTS_DIR=\\\"" + WORKSPACE_PATH + "lib/Transforms/YosysOptimizer/yosys\\\"",
        ],
        "//conditions:default": ["HEIR_NO_YOSYS=1"],
    }),
    includes = ["include"],
    deps = [
        "@heir//lib/Dialect/BGV/Conversions/BGVToLWE",
        "@heir//lib/Dialect/BGV/Conversions/BGVToOpenfhe",
        "@heir//lib/Dialect/BGV/IR:Dialect",
        "@heir//lib/Dialect/CGGI/Conversions/CGGIToJaxite",
        "@heir//lib/Dialect/CGGI/Conversions/CGGIToTfheRust",
        "@heir//lib/Dialect/CGGI/Conversions/CGGIToTfheRustBool",
        "@heir//lib/Dialect/CGGI/IR:Dialect",
        "@heir//lib/Dialect/CGGI/Transforms",
        "@heir//lib/Dialect/CKKS/Conversions/CKKSToOpenfhe",
        "@heir//lib/Dialect/CKKS/IR:Dialect",
        "@heir//lib/Dialect/Comb/IR:Dialect",
        "@heir//lib/Dialect/Jaxite/IR:Dialect",
        "@heir//lib/Dialect/LWE/Conversions/LWEToPolynomial",
        "@heir//lib/Dialect/LWE/IR:Dialect",
        "@heir//lib/Dialect/LWE/Transforms",
        "@heir//lib/Dialect/LWE/Transforms:AddClientInterface",
        "@heir//lib/Dialect/LinAlg/Conversions/LinalgToTensorExt",
        "@heir//lib/Dialect/ModArith/Conversions/ModArithToArith",
        "@heir//lib/Dialect/ModArith/IR:Dialect",
        "@heir//lib/Dialect/Openfhe/IR:Dialect",
        "@heir//lib/Dialect/Openfhe/Transforms",
        "@heir//lib/Dialect/Openfhe/Transforms:ConfigureCryptoContext",
        "@heir//lib/Dialect/Polynomial/Conversions/PolynomialToModArith",
        "@heir//lib/Dialect/Polynomial/Conversions/PolynomialToStandard",
        "@heir//lib/Dialect/Polynomial/Transforms",
        "@heir//lib/Dialect/Polynomial/Transforms:NTTRewrites",
        "@heir//lib/Dialect/RNS/IR:Dialect",
        "@heir//lib/Dialect/Random/IR:Dialect",
        "@heir//lib/Dialect/Secret/Conversions/SecretToBGV",
        "@heir//lib/Dialect/Secret/Conversions/SecretToCGGI",
        "@heir//lib/Dialect/Secret/Conversions/SecretToCKKS",
        "@heir//lib/Dialect/Secret/IR:Dialect",
        "@heir//lib/Dialect/Secret/Transforms",
        "@heir//lib/Dialect/Secret/Transforms:BufferizableOpInterface",
        "@heir//lib/Dialect/Secret/Transforms:DistributeGeneric",
        "@heir//lib/Dialect/TOSA/Conversions/TosaToSecretArith",
        "@heir//lib/Dialect/TensorExt/IR:Dialect",
        "@heir//lib/Dialect/TensorExt/Transforms",
        "@heir//lib/Dialect/TensorExt/Transforms:CollapseInsertionChains",
        "@heir//lib/Dialect/TensorExt/Transforms:InsertRotate",
        "@heir//lib/Dialect/TensorExt/Transforms:RotateAndReduce",
        "@heir//lib/Dialect/TfheRust/IR:Dialect",
        "@heir//lib/Dialect/TfheRustBool/IR:Dialect",
        "@heir//lib/Transforms/ApplyFolders",
        "@heir//lib/Transforms/ConvertIfToSelect",
        "@heir//lib/Transforms/ConvertSecretExtractToStaticExtract",
        "@heir//lib/Transforms/ConvertSecretForToStaticFor",
        "@heir//lib/Transforms/ConvertSecretInsertToStaticInsert",
        "@heir//lib/Transforms/ConvertSecretWhileToStaticFor",
        "@heir//lib/Transforms/ElementwiseToAffine",
        "@heir//lib/Transforms/ForwardInsertToExtract",
        "@heir//lib/Transforms/ForwardStoreToLoad",
        "@heir//lib/Transforms/FullLoopUnroll",
        "@heir//lib/Transforms/LinalgCanonicalizations",
        "@heir//lib/Transforms/MemrefToArith:ExpandCopy",
        "@heir//lib/Transforms/MemrefToArith:MemrefToArithRegistration",
        "@heir//lib/Transforms/OperationBalancer",
        "@heir//lib/Transforms/OptimizeRelinearization",
        "@heir//lib/Transforms/Secretize",
        "@heir//lib/Transforms/StraightLineVectorizer",
        "@heir//lib/Transforms/TensorToScalars",
        "@heir//lib/Transforms/UnusedMemRef",
        "@llvm-project//llvm:Support",
        "@llvm-project//mlir:AffineDialect",
        "@llvm-project//mlir:AffineToStandard",
        "@llvm-project//mlir:AffineTransforms",
        "@llvm-project//mlir:ArithDialect",
        "@llvm-project//mlir:ArithToLLVM",
        "@llvm-project//mlir:ArithTransforms",
        "@llvm-project//mlir:BufferizationDialect",
        "@llvm-project//mlir:BufferizationToMemRef",
        "@llvm-project//mlir:BufferizationTransforms",
        "@llvm-project//mlir:ComplexToLLVM",
        "@llvm-project//mlir:ControlFlowToLLVM",
        "@llvm-project//mlir:ControlFlowTransforms",
        "@llvm-project//mlir:ConvertToLLVM",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:FuncExtensions",
        "@llvm-project//mlir:FuncToLLVM",
        "@llvm-project//mlir:FuncTransforms",
        "@llvm-project//mlir:IndexToLLVM",
        "@llvm-project//mlir:LLVMDialect",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:LinalgTransforms",
        "@llvm-project//mlir:MathDialect",
        "@llvm-project//mlir:MathToLLVM",
        "@llvm-project//mlir:MemRefDialect",
        "@llvm-project//mlir:MemRefToLLVM",
        "@llvm-project//mlir:MemRefTransforms",
        "@llvm-project//mlir:MlirOptLib",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:PolynomialDialect",
        "@llvm-project//mlir:ReconcileUnrealizedCasts",
        "@llvm-project//mlir:SCFDialect",
        "@llvm-project//mlir:SCFToControlFlow",
        "@llvm-project//mlir:SCFTransforms",
        "@llvm-project//mlir:TensorToLinalg",
        "@llvm-project//mlir:TensorTransforms",
        "@llvm-project//mlir:TosaDialect",
        "@llvm-project//mlir:TosaToArith",
        "@llvm-project//mlir:TosaToLinalg",
        "@llvm-project//mlir:TosaToTensor",
        "@llvm-project//mlir:Transforms",
        "@llvm-project//mlir:UBToLLVM",
    ] + select({
        "@heir//:config_enable_yosys": [
            "@heir//lib/Transforms/YosysOptimizer",
        ],
        "//conditions:default": [],
    }),
)

# Custom `mlir-translate` replacement that adds our custom translations
cc_binary(
    name = "heir-translate",
    srcs = ["heir-translate.cpp"],
    includes = ["include"],
    deps = [
        "@heir//lib/Source/AutoHog:AutoHogImporter",
        "@heir//lib/Target/Jaxite:JaxiteEmitter",
        "@heir//lib/Target/Metadata:MetadataEmitter",
        "@heir//lib/Target/OpenFhePke:OpenFheRegistration",
        "@heir//lib/Target/TfheRust:TfheRustEmitter",
        "@heir//lib/Target/TfheRustBool:TfheRustBoolEmitter",
        "@heir//lib/Target/Verilog:VerilogEmitter",
        "@llvm-project//llvm:Support",
        "@llvm-project//mlir:Support",
        "@llvm-project//mlir:TranslateLib",
    ],
)

cc_binary(
    name = "heir-lsp",
    srcs = ["heir-lsp.cpp"],
    includes = ["include"],
    deps = [
        "@heir//lib/Dialect/BGV/IR:Dialect",
        "@heir//lib/Dialect/CGGI/IR:Dialect",
        "@heir//lib/Dialect/CKKS/IR:Dialect",
        "@heir//lib/Dialect/Comb/IR:Dialect",
        "@heir//lib/Dialect/LWE/IR:Dialect",
        "@heir//lib/Dialect/ModArith/IR:Dialect",
        "@heir//lib/Dialect/Openfhe/IR:Dialect",
        "@heir//lib/Dialect/Random/IR:Dialect",
        "@heir//lib/Dialect/Secret/IR:Dialect",
        "@heir//lib/Dialect/TensorExt/IR:Dialect",
        "@heir//lib/Dialect/TfheRust/IR:Dialect",
        "@heir//lib/Dialect/TfheRustBool/IR:Dialect",
        "@llvm-project//mlir:AffineDialect",
        "@llvm-project//mlir:AllPassesAndDialects",
        "@llvm-project//mlir:ArithDialect",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:LLVMDialect",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:MemRefDialect",
        "@llvm-project//mlir:MlirLspServerLib",
        "@llvm-project//mlir:MlirOptLib",
        "@llvm-project//mlir:PolynomialDialect",
        "@llvm-project//mlir:SCFDialect",
        "@llvm-project//mlir:TosaDialect",
    ],
)
