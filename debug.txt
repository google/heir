Loading:
Loading:
Loading: 0 packages loaded
Analyzing: target //tools:heir-opt (0 packages loaded, 0 targets configured)
INFO: Analyzed target //tools:heir-opt (0 packages loaded, 0 targets configured).
INFO: Found 1 target...
[0 / 4] [Prepa] BazelWorkspaceStatusAction stable-status.txt
[1 / 4] Compiling lib/Dialect/Arith/Conversions/ArithToModArith/ArithToModArith.cpp; 1s linux-sandbox
[2 / 4] [Prepa] Linking tools/heir-opt
[2 / 4] Linking tools/heir-opt; 1s linux-sandbox
Target //tools:heir-opt up-to-date:
  bazel-bin/tools/heir-opt
INFO: Elapsed time: 13.806s, Critical Path: 13.36s
INFO: 3 processes: 1 internal, 2 linux-sandbox.
INFO: Build completed successfully, 3 total actions
INFO: Running command line: bazel-bin/tools/heir-opt --arith-to-mod-arith /usr/local/google/home/legiest/heir/tests/Dialect/Arith/Conversions/ArithToModArith/arith-to-mod-arith.mlir
<unknown>:0: error: invalid memref element type
heir-opt: external/llvm-project/mlir/include/mlir/IR/StorageUniquerSupport.h:180: static ConcreteT mlir::detail::StorageUserBase<mlir::MemRefType, mlir::BaseMemRefType, mlir::detail::MemRefTypeStorage, mlir::detail::TypeUniquer, mlir::ShapedType::Trait>::get(MLIRContext *, Args &&...) [ConcreteT = mlir::MemRefType, BaseT = mlir::BaseMemRefType, StorageT = mlir::detail::MemRefTypeStorage, UniquerT = mlir::detail::TypeUniquer, Traits = <mlir::ShapedType::Trait>, Args = <llvm::ArrayRef<long> &, mlir::Type &, mlir::MemRefLayoutAttrInterface &, mlir::Attribute &>]: Assertion `succeeded( ConcreteT::verifyInvariants(getDefaultDiagnosticEmitFn(ctx), args...))' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.  Program arguments: /usr/local/google/home/legiest/.cache/bazel/_bazel_legiest/0167411e4815a34188c70d6ec5fca69a/execroot/heir/bazel-out/k8-dbg/bin/tools/heir-opt --arith-to-mod-arith /usr/local/google/home/legiest/heir/tests/Dialect/Arith/Conversions/ArithToModArith/arith-to-mod-arith.mlir
 #0 0x0000563ada56c4e1 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:723:11
 #1 0x0000563ada56c9db PrintStackTraceSignalHandler(void*) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:798:1
 #2 0x0000563ada56a046 llvm::sys::RunSignalHandlers() /proc/self/cwd/external/llvm-project/llvm/lib/Support/Signals.cpp:105:5
 #3 0x0000563ada56d0a5 SignalHandler(int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:413:1
 #4 0x00007fd2b4656590 (/lib/x86_64-linux-gnu/libc.so.6+0x3f590)
 #5 0x00007fd2b46a53ac __pthread_kill_implementation ./nptl/pthread_kill.c:44:76
 #6 0x00007fd2b46564f2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #7 0x00007fd2b463f4ed abort ./stdlib/abort.c:81:7
 #8 0x00007fd2b463f415 _nl_load_domain ./intl/loadmsgcat.c:1177:9
 #9 0x00007fd2b464f012 (/lib/x86_64-linux-gnu/libc.so.6+0x38012)
#10 0x0000563ada340539 mlir::MemRefType mlir::detail::StorageUserBase<mlir::MemRefType, mlir::BaseMemRefType, mlir::detail::MemRefTypeStorage, mlir::detail::TypeUniquer, mlir::ShapedType::Trait>::get<llvm::ArrayRef<long>&, mlir::Type&, mlir::MemRefLayoutAttrInterface&, mlir::Attribute&>(mlir::MLIRContext*, llvm::ArrayRef<long>&, mlir::Type&, mlir::MemRefLayoutAttrInterface&, mlir::Attribute&) /proc/self/cwd/external/llvm-project/mlir/include/mlir/IR/StorageUniquerSupport.h:0:5
#11 0x0000563ada33b6f2 mlir::MemRefType::get(llvm::ArrayRef<long>, mlir::Type, mlir::MemRefLayoutAttrInterface, mlir::Attribute) /proc/self/cwd/external/llvm-project/mlir/lib/IR/BuiltinTypes.cpp:546:10
#12 0x0000563ad63a746c mlir::MemRefType::Builder::operator mlir::MemRefType() /proc/self/cwd/external/llvm-project/mlir/include/mlir/IR/BuiltinTypes.h:245:12
#13 0x0000563ada33ad41 mlir::BaseMemRefType::cloneWith(std::optional<llvm::ArrayRef<long>>, mlir::Type) const /proc/self/cwd/external/llvm-project/mlir/lib/IR/BuiltinTypes.cpp:394:10
#14 0x0000563ada355f99 mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::cloneWith(mlir::detail::ShapedTypeInterfaceTraits::Concept const*, mlir::Type, std::optional<llvm::ArrayRef<long>>, mlir::Type) /proc/self/cwd/bazel-out/k8-dbg/bin/external/llvm-project/mlir/include/mlir/IR/BuiltinTypeInterfaces.h.inc:289:60
#15 0x0000563ada336ac1 mlir::ShapedType::cloneWith(std::optional<llvm::ArrayRef<long>>, mlir::Type) const /proc/self/cwd/bazel-out/k8-dbg/bin/external/llvm-project/mlir/include/mlir/IR/BuiltinTypeInterfaces.cpp.inc:17:14
#16 0x0000563ad359d828 mlir::heir::arith::convertArithLikeType(mlir::ShapedType) /proc/self/cwd/lib/Dialect/Arith/Conversions/ArithToModArith/ArithToModArith.cpp:44:17
#17 0x0000563ad35a3ec1 mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)::operator()(mlir::ShapedType) const /proc/self/cwd/lib/Dialect/Arith/Conversions/ArithToModArith/ArithToModArith.cpp:83:46
#18 0x0000563ad35a2f59 std::enable_if<std::is_invocable_v<mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::ShapedType>, std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>>::type mlir::TypeConverter::wrapCallback<mlir::ShapedType, mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&) const::'lambda'(mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&)::operator()(mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&) const /proc/self/cwd/external/llvm-project/mlir/include/mlir/Transforms/DialectConversion.h:370:43
#19 0x0000563ad35a2e66 std::enable_if<std::is_invocable_v<mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&>, std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>>::type mlir::TypeConverter::wrapCallback<mlir::ShapedType, std::enable_if<std::is_invocable_v<mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::ShapedType>, std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>>::type mlir::TypeConverter::wrapCallback<mlir::ShapedType, mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&) const::'lambda'(mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&)>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&) const::'lambda'(mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)::operator()(mlir::Type, llvm::SmallVectorImpl<mlir::Type>&) const /proc/self/cwd/external/llvm-project/mlir/include/mlir/Transforms/DialectConversion.h:391:14
#20 0x0000563ad35a2de0 mlir::ShapedType std::__invoke_impl<std::optional<llvm::LogicalResult>, std::enable_if<std::is_invocable_v<mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&>, std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>>::type mlir::TypeConverter::wrapCallback<mlir::ShapedType, std::enable_if<std::is_invocable_v<mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::ShapedType>, std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>>::type mlir::TypeConverter::wrapCallback<mlir::ShapedType, mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&) const::'lambda'(mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&)>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&) const::'lambda'(mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)&, mlir::Type, llvm::SmallVectorImpl<mlir::Type>&>(std::__invoke_other, mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&, mlir::Type&&, llvm::SmallVectorImpl<mlir::Type>&) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/invoke.h:61:14
#21 0x0000563ad35a2d65 std::enable_if<is_invocable_r_v<mlir::ShapedType, mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::Type, llvm::SmallVectorImpl<mlir::Type>&>, mlir::ShapedType>::type std::__invoke_r<std::optional<llvm::LogicalResult>, std::enable_if<std::is_invocable_v<mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&>, std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>>::type mlir::TypeConverter::wrapCallback<mlir::ShapedType, std::enable_if<std::is_invocable_v<mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::ShapedType>, std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>>::type mlir::TypeConverter::wrapCallback<mlir::ShapedType, mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&) const::'lambda'(mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&)>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&) const::'lambda'(mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)&, mlir::Type, llvm::SmallVectorImpl<mlir::Type>&>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&, mlir::Type&&, llvm::SmallVectorImpl<mlir::Type>&) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/invoke.h:114:9
#22 0x0000563ad35a2c6d std::_Function_handler<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&), std::enable_if<std::is_invocable_v<mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&>, std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>>::type mlir::TypeConverter::wrapCallback<mlir::ShapedType, std::enable_if<std::is_invocable_v<mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType), mlir::ShapedType>, std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>>::type mlir::TypeConverter::wrapCallback<mlir::ShapedType, mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&) const::'lambda'(mlir::ShapedType, llvm::SmallVectorImpl<mlir::Type>&)>(mlir::heir::arith::ArithToModArithTypeConverter::ArithToModArithTypeConverter(mlir::MLIRContext*)::'lambda'(mlir::ShapedType)&&) const::'lambda'(mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>::_M_invoke(std::_Any_data const&, mlir::Type&&, llvm::SmallVectorImpl<mlir::Type>&) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/std_function.h:290:9
#23 0x0000563ad9a976d5 std::function<std::optional<llvm::LogicalResult> (mlir::Type, llvm::SmallVectorImpl<mlir::Type>&)>::operator()(mlir::Type, llvm::SmallVectorImpl<mlir::Type>&) const /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/std_function.h:591:9
#24 0x0000563ad9a705b0 mlir::TypeConverter::convertType(mlir::Type, llvm::SmallVectorImpl<mlir::Type>&) const /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:2889:47
#25 0x0000563ad9a72c2e mlir::TypeConverter::convertType(mlir::Type) const /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:2910:14
#26 0x0000563ad9a796a5 mlir::TypeConverter::isLegal(mlir::Type) const /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:2927:10
#27 0x0000563ad9ab2708 std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)::operator()(mlir::Type) const /proc/self/cwd/external/llvm-project/mlir/include/mlir/Transforms/DialectConversion.h:288:52
#28 0x0000563ad9ab26c8 bool __gnu_cxx::__ops::_Iter_negate<std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)>::operator()<llvm::concat_iterator<mlir::Type const, mlir::Type const*, mlir::Type const*>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/predefined_ops.h:395:11
#29 0x0000563ad9ab2625 llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>> std::__find_if<llvm::concat_iterator<mlir::Type const, mlir::Type const*, mlir::Type const*>, __gnu_cxx::__ops::_Iter_negate<std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, __gnu_cxx::__ops::_Iter_negate<std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)>, std::input_iterator_tag) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_algobase.h:2080:35
#30 0x0000563ad9ab2561 llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>> std::__find_if_not<llvm::concat_iterator<mlir::Type const, mlir::Type const*, mlir::Type const*>, __gnu_cxx::__ops::_Iter_pred<std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, __gnu_cxx::__ops::_Iter_pred<std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)>) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_algo.h:112:14
#31 0x0000563ad9ab24b3 llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>> std::find_if_not<llvm::concat_iterator<mlir::Type const, mlir::Type const*, mlir::Type const*>, std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_algo.h:471:14
#32 0x0000563ad9ab240e bool std::all_of<llvm::concat_iterator<mlir::Type const, mlir::Type const*, mlir::Type const*>, std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_algo.h:411:24
#33 0x0000563ad9ab2393 bool llvm::all_of<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&, std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&, std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const::'lambda'(mlir::Type)) /proc/self/cwd/external/llvm-project/llvm/include/llvm/ADT/STLExtras.h:1740:3
#34 0x0000563ad9a97bb5 std::enable_if<!std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Type>::value && !std::is_convertible<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>, mlir::Operation*>::value, bool>::type mlir::TypeConverter::isLegal<llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>>(llvm::detail::concat_range<mlir::Type const, llvm::ArrayRef<mlir::Type>, llvm::ArrayRef<mlir::Type>>&&) const /proc/self/cwd/external/llvm-project/mlir/include/mlir/Transforms/DialectConversion.h:288:5
#35 0x0000563ad9a79828 mlir::TypeConverter::isSignatureLegal(mlir::FunctionType) const /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:2940:3
#36 0x0000563ad5419519 mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0::operator()(mlir::func::FuncOp) const /proc/self/cwd/lib/Utils/ConversionUtils/ConversionUtils.cpp:258:26
#37 0x0000563ad54194d2 std::enable_if<!std::is_invocable_v<mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0, mlir::Operation*>, void>::type mlir::ConversionTarget::addDynamicallyLegalOp<mlir::func::FuncOp, mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0>(mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /proc/self/cwd/external/llvm-project/mlir/include/mlir/Transforms/DialectConversion.h:1023:30
#38 0x0000563ad5419490 bool std::__invoke_impl<bool, std::enable_if<!std::is_invocable_v<mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0, mlir::Operation*>, void>::type mlir::ConversionTarget::addDynamicallyLegalOp<mlir::func::FuncOp, mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0>(mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0&&)::'lambda'(mlir::Operation*)&, mlir::Operation*>(std::__invoke_other, mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0&&, mlir::Operation*&&) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/invoke.h:61:7
#39 0x0000563ad541941d std::enable_if<is_invocable_r_v<std::optional<bool>, mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0, mlir::Operation*>, std::optional<bool>>::type std::__invoke_r<std::optional<bool>, std::enable_if<!std::is_invocable_v<mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0, mlir::Operation*>, void>::type mlir::ConversionTarget::addDynamicallyLegalOp<mlir::func::FuncOp, mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0>(mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0&&)::'lambda'(mlir::Operation*)&, mlir::Operation*>(mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0&&, mlir::Operation*&&) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/invoke.h:114:9
#40 0x0000563ad5419325 std::_Function_handler<std::optional<bool> (mlir::Operation*), std::enable_if<!std::is_invocable_v<mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0, mlir::Operation*>, void>::type mlir::ConversionTarget::addDynamicallyLegalOp<mlir::func::FuncOp, mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0>(mlir::heir::addStructuralConversionPatterns(mlir::TypeConverter&, mlir::RewritePatternSet&, mlir::ConversionTarget&)::$_0&&)::'lambda'(mlir::Operation*)>::_M_invoke(std::_Any_data const&, mlir::Operation*&&) /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/std_function.h:290:9
#41 0x0000563ad9a987dd std::function<std::optional<bool> (mlir::Operation*)>::operator()(mlir::Operation*) const /usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/std_function.h:591:9
#42 0x0000563ad9a7b468 mlir::ConversionTarget::isLegal(mlir::Operation*) const::$_0::operator()() const /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:3199:36
#43 0x0000563ad9a7b1fe mlir::ConversionTarget::isLegal(mlir::Operation*) const /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:3207:8
#44 0x0000563ad9a90865 mlir::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation*>)::$_0::operator()(mlir::Operation*) const /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:2707:38
#45 0x0000563ad9a9081d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<mlir::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation*>)::$_0>(long, mlir::Operation*) /proc/self/cwd/external/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:46:12
#46 0x0000563ad35dd281 llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::operator()(mlir::Operation*) const /proc/self/cwd/external/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:69:12
#47 0x0000563ad9aaf6b1 mlir::WalkResult mlir::detail::walk<mlir::ForwardDominanceIterator<false>>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /proc/self/cwd/external/llvm-project/mlir/include/mlir/IR/Visitors.h:259:25
#48 0x0000563ad9aaf956 mlir::WalkResult mlir::detail::walk<mlir::ForwardDominanceIterator<false>>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /proc/self/cwd/external/llvm-project/mlir/include/mlir/IR/Visitors.h:273:13
#49 0x0000563ad9aaf956 mlir::WalkResult mlir::detail::walk<mlir::ForwardDominanceIterator<false>>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /proc/self/cwd/external/llvm-project/mlir/include/mlir/IR/Visitors.h:273:13
#50 0x0000563ad9a907bf std::enable_if<llvm::is_one_of<mlir::Operation*, mlir::Operation*, mlir::Region*, mlir::Block*>::value, mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)0, mlir::ForwardDominanceIterator<false>, mlir::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation*>)::$_0, mlir::Operation*, mlir::WalkResult>(mlir::Operation*, mlir::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation*>)::$_0&&) /proc/self/cwd/external/llvm-project/mlir/include/mlir/IR/Visitors.h:312:10
#51 0x0000563ad9a77a9d std::enable_if<llvm::function_traits<std::decay<mlir::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation*>)::$_0>::type>::num_args == 1, mlir::WalkResult>::type mlir::Operation::walk<(mlir::WalkOrder)0, mlir::ForwardDominanceIterator<false>, mlir::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation*>)::$_0, mlir::WalkResult>(mlir::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation*>)::$_0&&) /proc/self/cwd/external/llvm-project/mlir/include/mlir/IR/Operation.h:794:12
#52 0x0000563ad9a77274 mlir::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation*>) /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:2702:9
#53 0x0000563ad9a7c227 mlir::applyPartialConversion(llvm::ArrayRef<mlir::Operation*>, mlir::ConversionTarget const&, mlir::FrozenRewritePatternSet const&, mlir::ConversionConfig) /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:3403:22
#54 0x0000563ad9a7c3ad mlir::applyPartialConversion(mlir::Operation*, mlir::ConversionTarget const&, mlir::FrozenRewritePatternSet const&, mlir::ConversionConfig) /proc/self/cwd/external/llvm-project/mlir/lib/Transforms/Utils/DialectConversion.cpp:3409:10
#55 0x0000563ad359d52b mlir::heir::arith::ArithToModArith::runOnOperation() /proc/self/cwd/lib/Dialect/Arith/Conversions/ArithToModArith/ArithToModArith.cpp:210:14
#56 0x0000563ada0d938b mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int)::$_1::operator()() const /proc/self/cwd/external/llvm-project/mlir/lib/Pass/Pass.cpp:0:17
#57 0x0000563ada0d9325 void llvm::function_ref<void ()>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int)::$_1>(long) /proc/self/cwd/external/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:46:5
#58 0x0000563ad4f77699 llvm::function_ref<void ()>::operator()() const /proc/self/cwd/external/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:69:5
#59 0x0000563ada0dc115 void mlir::MLIRContext::executeAction<mlir::PassExecutionAction, mlir::Pass&>(llvm::function_ref<void ()>, llvm::ArrayRef<mlir::IRUnit>, mlir::Pass&) /proc/self/cwd/external/llvm-project/mlir/include/mlir/IR/MLIRContext.h:281:3
#60 0x0000563ada0d3b93 mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int) /proc/self/cwd/external/llvm-project/mlir/lib/Pass/Pass.cpp:532:17
#61 0x0000563ada0d434f mlir::detail::OpToOpPassAdaptor::runPipeline(mlir::OpPassManager&, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int, mlir::PassInstrumentor*, mlir::PassInstrumentation::PipelineParentInfo const*) /proc/self/cwd/external/llvm-project/mlir/lib/Pass/Pass.cpp:592:16
#62 0x0000563ada0d6829 mlir::PassManager::runPasses(mlir::Operation*, mlir::AnalysisManager) /proc/self/cwd/external/llvm-project/mlir/lib/Pass/Pass.cpp:905:10
#63 0x0000563ada0d669e mlir::PassManager::run(mlir::Operation*) /proc/self/cwd/external/llvm-project/mlir/lib/Pass/Pass.cpp:885:60
#64 0x0000563ad4f52a66 performActions(llvm::raw_ostream&, std::shared_ptr<llvm::SourceMgr> const&, mlir::MLIRContext*, mlir::MlirOptMainConfig const&) /proc/self/cwd/external/llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:474:17
#65 0x0000563ad4f52190 processBuffer(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::MlirOptMainConfig const&, mlir::DialectRegistry&, llvm::ThreadPoolInterface*) /proc/self/cwd/external/llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:542:12
#66 0x0000563ad4f51d6c mlir::MlirOptMain(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::DialectRegistry&, mlir::MlirOptMainConfig const&)::$_0::operator()(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&) const /proc/self/cwd/external/llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:625:12
#67 0x0000563ad4f51cd6 llvm::LogicalResult llvm::function_ref<llvm::LogicalResult (std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&)>::callback_fn<mlir::MlirOptMain(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::DialectRegistry&, mlir::MlirOptMainConfig const&)::$_0>(long, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&) /proc/self/cwd/external/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:46:12
#68 0x0000563ada49a2d2 llvm::function_ref<llvm::LogicalResult (std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&)>::operator()(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&) const /proc/self/cwd/external/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:69:12
#69 0x0000563ada4994fa mlir::splitAndProcessBuffer(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::function_ref<llvm::LogicalResult (std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&)>, llvm::raw_ostream&, llvm::StringRef, llvm::StringRef) /proc/self/cwd/external/llvm-project/mlir/lib/Support/ToolUtilities.cpp:27:12
#70 0x0000563ad4f4d138 mlir::MlirOptMain(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::DialectRegistry&, mlir::MlirOptMainConfig const&) /proc/self/cwd/external/llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:628:10
#71 0x0000563ad4f4d6d8 mlir::MlirOptMain(int, char**, llvm::StringRef, llvm::StringRef, mlir::DialectRegistry&) /proc/self/cwd/external/llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:669:14
#72 0x0000563ad4f4da07 mlir::MlirOptMain(int, char**, llvm::StringRef, mlir::DialectRegistry&) /proc/self/cwd/external/llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:685:10
#73 0x0000563ad355ca28 main /proc/self/cwd/tools/heir-opt.cpp:335:7
#74 0x00007fd2b4640c8a __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:74:3
#75 0x00007fd2b4640d45 call_init ./csu/../csu/libc-start.c:128:20
#76 0x00007fd2b4640d45 __libc_start_main ./csu/../csu/libc-start.c:347:5
#77 0x0000563ad355b8a1 _start (/usr/local/google/home/legiest/.cache/bazel/_bazel_legiest/0167411e4815a34188c70d6ec5fca69a/execroot/heir/bazel-out/k8-dbg/bin/tools/heir-opt+0x30f68a1)
