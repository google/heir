#!/bin/bash

set -eux
set -o pipefail

# enable ** to glob through subdirectories, disabled by default in bash
shopt -s globstar

SRC_BASE="bazel-bin/lib"
DEST_BASE="docs/content/en/docs"

echo "Processing Non-conversion Passes"
mkdir -p "$DEST_BASE/Passes/"
for SRC_PATH in $SRC_BASE/**/*Passes.md
do
  FILENAME=$(basename "$SRC_PATH")
  FILENAME_BASE=$(basename "$SRC_PATH" .md)
  DEST_PATH="$DEST_BASE/Passes/$FILENAME"
  cat <<EOF > "$DEST_PATH"
---
title: $FILENAME_BASE
github_url: https://github.com/google/heir/edit/main/$SRC_PATH
---
EOF
  cat "$SRC_PATH" >> "$DEST_PATH"
done

echo "Processing Conversion Passes"
mkdir -p "$DEST_BASE/Passes/"
for SRC_PATH in $SRC_BASE/Conversion/**/*.md
do
  FILENAME=$(basename "$SRC_PATH")
  FILENAME_BASE=$(basename "$SRC_PATH" .md)
  DEST_PATH="$DEST_BASE/Passes/$FILENAME"
  cat <<EOF > "$DEST_PATH"
---
title: $FILENAME_BASE
github_url: https://github.com/google/heir/edit/main/$SRC_PATH
---
EOF
  cat "$SRC_PATH" >> "$DEST_PATH"
done

# Group the generated markdown for each dialect into a single markdown file,
# even if they are generated by multiple mlir-tblgen invocations. This works
# because the header levels generated by mlir-tblgen are all level 3 and lower.
# So we can just concatenate the files together in the right order and add a
# yaml frontmatter.
echo "Processing Dialects"
mkdir -p "$DEST_BASE/Dialects/"
for DIALECT_DIR in $SRC_BASE/Dialect/*
do
  # expects each subdirectory of `Dialect/` to be the name of the dialect
  if [[ ! -d "$DIALECT_DIR" ]]
  then
    echo "Skipping non-directory file $DIALECT_DIR"
    continue
  fi
  DIALECT_NAME=$(basename "$DIALECT_DIR")
  echo "Processing $DIALECT_NAME"
  FILENAME="${DIALECT_NAME}.md"
  DEST_PATH="$DEST_BASE/Dialects/$FILENAME"
  cat <<EOF > "$DEST_PATH"
---
title: $DIALECT_NAME
github_url: https://github.com/google/heir/edit/main/lib/Dialect/$DIALECT_NAME/IR
---
EOF

  declare -A markdown_files
  for SRC_PATH in $DIALECT_DIR/IR/**/*.md
  do
    markdown_files[${SRC_PATH}]=1
    echo "Adding $SRC_PATH to the queue"
  done

  # Process generated markdown files in a particular order to ensure
  # the docs have the basic concepts listed first.
  # -a keeps the array in order
  groups=(Dialect Attributes Types Ops)

  for INDEX in "${!groups[@]}"
  do
    GROUP=${groups[$INDEX]}
    SEARCH_PATH="${DIALECT_DIR}/IR/*${GROUP}.md"
    for SRC_PATH in $SEARCH_PATH
    do
      # E.g., a dialect may not define any ops, so `cat` would fail to find the
      # ${DIALECT_NAME}Ops.md file
      if [ ! -f $SRC_PATH ]
      then
        continue
      fi

      # Docsy handles TOC and page title, so the Dialect docs need special care.
      if [ $INDEX -eq 0 ]
      then
        cat "$SRC_PATH" | sed 's/^#.*Dialect//' | sed 's/^\[TOC\]$//' >> "$DEST_PATH"
      else
        # , lowercases the first character of the string
        echo "## $DIALECT_NAME ${GROUP,}" >> "$DEST_PATH"
        cat "$SRC_PATH" >> "$DEST_PATH"
      fi

      unset markdown_files[$SRC_PATH]
    done
  done

  if [ ${#markdown_files[@]} -ne 0 ]
  then
    echo "## $DIALECT_NAME additional definitions" >> "$DEST_PATH"
    # Include all other markdown files not included in the grouping above.
    for SRC_PATH in "${!markdown_files[@]}"
    do
      if [ ! -f $SRC_PATH ]
      then
        unset markdown_files[$SRC_PATH]
        continue
      fi

      cat "$SRC_PATH" >> "$DEST_PATH" && unset markdown_files[$SRC_PATH]
    done
  fi
done
