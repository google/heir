// RUN: heir-opt --annotate-module="backend=openfhe scheme=ckks" -affine-loop-normalize='promote-single-iter=1' --secretize --wrap-generic --secret-insert-mgmt-ckks --secret-distribute-generic --canonicalize --secret-to-ckks --cse %s | FileCheck %s

// CHECK: ![[ct_L1:.*]] = !lwe.new_lwe_ciphertext<{{.*}}<message_type = f32>

module attributes {ckks.schemeParam = #ckks.scheme_param<logN = 13, Q = [36028797019389953, 35184372121601], P = [36028797019488257], logDefaultScale = 45>} {
  // CHECK: func @main
  // CHECK-SAME: %[[arg0:.*]]: tensor<1x16x![[ct_L1]]>, %[[arg1:.*]]: tensor<1x16x![[ct_L1]]>
  func.func @main(%arg0: tensor<1x16xf32>, %arg1: tensor<1x16xf32>) -> tensor<1x16xf32> {
    // CHECK-NOT: secret
    // CHECK: %[[v0:.*]] = affine.for %[[arg2:.*]] = 0 to 16
    //   CHECK: affine.for %[[arg3:.*]] = 0 to 16
    //     extract values from %arg0, %arg1, and %0
    //     CHECK-COUNT-3: tensor.extract
    //     CHECK-NEXT: lwe.rlwe_encode
    //     CHECK-NEXT: ckks.mul_plain
    //     CHECK-NEXT: ckks.add
    //     CHECK-NEXT: tensor.insert
    //   CHECK-NEXT: affine.yield
    // CHECK: return %[[v0]]
    // CHECK-SAME: tensor<1x16x![[ct_L1]]>
    %0 = "tosa.const"() <{values = dense<"0xtensor<16x16xf32>}> : () -> tensor<16x16xf32>
    %1 = affine.for %arg2 = 0 to 1 iter_args(%arg3 = %arg1) -> (tensor<1x16xf32>) {
      %2 = affine.for %arg4 = 0 to 16 iter_args(%arg5 = %arg3) -> (tensor<1x16xf32>) {
        %3 = affine.for %arg6 = 0 to 16 iter_args(%arg7 = %arg5) -> (tensor<1x16xf32>) {
          %extracted = tensor.extract %arg0[%arg2, %arg6] : tensor<1x16xf32>
          %extracted_0 = tensor.extract %0[%arg6, %arg4] : tensor<16x16xf32>
          %extracted_1 = tensor.extract %arg7[%arg2, %arg4] : tensor<1x16xf32>
          %4 = arith.mulf %extracted, %extracted_0 : f32
          %5 = arith.addf %extracted_1, %4 : f32
          %inserted = tensor.insert %5 into %arg7[%arg2, %arg4] : tensor<1x16xf32>
          affine.yield %inserted : tensor<1x16xf32>
        }
        affine.yield %3 : tensor<1x16xf32>
      }
      affine.yield %2 : tensor<1x16xf32>
    }
    return %1 : tensor<1x16xf32>
  }
}
