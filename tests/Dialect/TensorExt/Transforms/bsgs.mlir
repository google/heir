
func.func @simple_sum(%arg0: tensor<16xf32>) -> tensor<16xf32> {
    %cst_0 = arith.constant dense<"0xtensor<16x16xf32>

  %row0 = tensor.extract_slice %cst_0[0, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c0 = arith.constant 0 : index
  %rot0 = tensor_ext.rotate %arg0, %c0 : tensor<16xf32>, index
  %result0 = arith.muli %rot0, %row0 : f32

  %row1 = tensor.extract_slice %cst_0[1, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c1 = arith.constant 1 : index
  %rot1 = tensor_ext.rotate %arg0, %c1 : tensor<16xf32>, index
  %result1 = arith.muli %rot1, %row1 : f32

  %row2 = tensor.extract_slice %cst_0[2, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c2 = arith.constant 2 : index
  %rot2 = tensor_ext.rotate %arg0, %c2 : tensor<16xf32>, index
  %result2 = arith.muli %rot2, %row2 : f32

  %row3 = tensor.extract_slice %cst_0[3, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c3 = arith.constant 3 : index
  %rot3 = tensor_ext.rotate %arg0, %c3 : tensor<16xf32>, index
  %result3 = arith.muli %rot3, %row3 : f32

  %row4 = tensor.extract_slice %cst_0[4, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c4 = arith.constant 4 : index
  %rot4 = tensor_ext.rotate %arg0, %c4 : tensor<16xf32>, index
  %result4 = arith.muli %rot4, %row4 : f32

  %accum0 = arith.addf %result0, %result1 : tensor<16xf32>
  %accum1 = arith.addf %accum0, %result2 : tensor<16xf32>
  %accum2 = arith.addf %accum1, %result3 : tensor<16xf32>
  %accum3 = arith.addf %accum2, %result4 : tensor<16xf32>

  return %accum3 : tensor<16xf32>
}

// Step 1
func.func @simple_sum(%arg0: tensor<16xf32>) -> tensor<16xf32> {
    %cst_0 = arith.constant dense<"0xtensor<16x16xf32>

  %row0 = tensor.extract_slice %cst_0[0, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c0 = arith.constant 0 : index
  %rot0 = tensor_ext.rotate %arg0, %c0 : tensor<16xf32>, index
  %result0 = arith.muli %rot0, %row0 : f32

  %row1 = tensor.extract_slice %cst_0[1, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c1 = arith.constant 1 : index
  %rot1 = tensor_ext.rotate %arg0, %c1 : tensor<16xf32>, index
  %result1 = arith.muli %rot1, %row1 : f32

  %row2 = tensor.extract_slice %cst_0[2, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c2 = arith.constant 2 : index
  %rot2 = tensor_ext.rotate %arg0, %c2 : tensor<16xf32>, index
  %result2 = arith.muli %rot2, %row2 : f32

  %row3 = tensor.extract_slice %cst_0[3, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c3 = arith.constant 3 : index
  %rot3 = tensor_ext.rotate %arg0, %c3 : tensor<16xf32>, index
  %result3 = arith.muli %rot3, %row3 : f32

  %row4 = tensor.extract_slice %cst_0[4, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c4 = arith.constant 4 : index
  %cminus4 = arith.constant -4 : i32
  %ct_rot4 = tensor_ext.rotate %row4, %cminus4 : tensor<16xf32>, index
  // %rot4 = tensor_ext.rotate %arg0, %c4 : tensor<16xf32>, index
  %mul4 = arith.muli %ct_rot4, %arg0 : f32
  %result4 = tensor_ext.rotate %mul4, %c4 : tensor<16xf32>, index

  %accum0 = arith.addf %result0, %result1 : tensor<16xf32>
  %accum1 = arith.addf %accum0, %result2 : tensor<16xf32>
  %accum2 = arith.addf %accum1, %result3 : tensor<16xf32>
  %accum3 = arith.addf %accum2, %result4 : tensor<16xf32>

  return %accum3 : tensor<16xf32>
}

// Step 2
func.func @simple_sum(%arg0: tensor<16xf32>) -> tensor<16xf32> {
    %cst_0 = arith.constant dense<"0xtensor<16x16xf32>

  %row0 = tensor.extract_slice %cst_0[0, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c0 = arith.constant 0 : index
  %rot0 = tensor_ext.rotate %arg0, %c0 : tensor<16xf32>, index
  %result0 = arith.muli %rot0, %row0 : f32

  %row1 = tensor.extract_slice %cst_0[1, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c1 = arith.constant 1 : index
  %rot1 = tensor_ext.rotate %arg0, %c1 : tensor<16xf32>, index
  %result1 = arith.muli %rot1, %row1 : f32

  %row2 = tensor.extract_slice %cst_0[2, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c2 = arith.constant 2 : index
  %rot2 = tensor_ext.rotate %arg0, %c2 : tensor<16xf32>, index
  %result2 = arith.muli %rot2, %row2 : f32

  %row3 = tensor.extract_slice %cst_0[3, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c3 = arith.constant 3 : index
  %rot3 = tensor_ext.rotate %arg0, %c3 : tensor<16xf32>, index
  %result3 = arith.muli %rot3, %row3 : f32

  %row4 = tensor.extract_slice %cst_0[4, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %c4 = arith.constant 4 : index
  %cminus4 = arith.constant -4 : i32
  %ct_rot4 = tensor_ext.rotate %row4, %cminus4 : tensor<16xf32>, index
  // %rot4 = tensor_ext.rotate %arg0, %c4 : tensor<16xf32>, index
  %mul4 = arith.muli %ct_rot4, %arg0 : f32
  %result4 = tensor_ext.rotate %mul4, %c4 : tensor<16xf32>, index

  // ...

  %row8 = tensor.extract_slice %cst_0[8, 0] [1, 16] [1, 1] : tensor<16x16xf32> to tensor<16xf32>
  %ct_rot8 = tensor_ext.rotate %row8, %cminus4 : tensor<16xf32>, index
  %mul8 = arith.muli %ct_rot8, %arg0 : f32
  %result8 = tensor_ext.rotate %mul8, %c4 : tensor<16xf32>, index

  %accum0 = arith.addf %result0, %result1 : tensor<16xf32>
  %accum1 = arith.addf %accum0, %result2 : tensor<16xf32>
  %accum2 = arith.addf %accum1, %result3 : tensor<16xf32>
  %accum3 = arith.addf %accum2, %result4 : tensor<16xf32>
  // ...
  %accum7 = arith.addf %accum7, %result8 : tensor<16xf32>

  return %accum3 : tensor<16xf32>
}



// Passes to add:
// 1. Identify baby step + giant step rotations
// 2. Fold rotation into plaintext encoding
